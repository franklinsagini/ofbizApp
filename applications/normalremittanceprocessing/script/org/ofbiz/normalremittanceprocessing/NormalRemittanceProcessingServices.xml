<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">
    
    <!-- NormalRemittanceMonthYear -->
    <simple-method method-name="createNormalRemittanceMonthYear" short-description="Create NormalRemittanceMonthYear">
        <make-value entity-name="NormalRemittanceMonthYear" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set field="entityName" value="NormalRemittanceMonthYear"></set>
        
        <set field="newEntity.normalRemittanceMonthYearId" value="${bsh:org.ofbiz.party.party.SaccoUtility.getNextSequenc(entityName);}"></set>
        <set field="newEntity.isActive" value="Y"/>
        <set field="newEntity.remittanceNumber" from-field="newEntity.normalRemittanceMonthYearId"/>
	    <set field="newEntity.createdBy" from-field="userLogin.userLoginId"/>
        <create-value value-field="newEntity"/>
    </simple-method>
    
     <simple-method method-name="updateNormalRemittanceMonthYear" short-description="Update NormalRemittanceMonthYear">
        <entity-one entity-name="NormalRemittanceMonthYear" value-field="lookedUpValue"/>
        <set-nonpk-fields value-field="lookedUpValue" map="parameters"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    
    <simple-method method-name="deleteNormalRemittanceMonthYear" short-description="Delete NormalRemittanceMonthYear">
        <entity-one entity-name="NormalRemittanceMonthYear" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>
    
    <!-- MemberRemittance -->
    <simple-method method-name="createMemberRemittance" short-description="Create MemberRemittance">
        <make-value entity-name="MemberRemittance" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set field="entityName" value="MemberRemittance"></set>
        <set field="newEntity.memberRemittanceId" value="${bsh:org.ofbiz.party.party.SaccoUtility.getNextSequenc(entityName);}"></set>
        <set field="newEntity.isActive" value="Y"/>
	    <set field="newEntity.createdBy" from-field="userLogin.userLoginId"/>
        <create-value value-field="newEntity"/>
    </simple-method>
    
     <simple-method method-name="updateMemberRemittance" short-description="Update MemberRemittance">
        <entity-one entity-name="MemberRemittance" value-field="lookedUpValue"/>
        <set-nonpk-fields value-field="lookedUpValue" map="parameters"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    
    <simple-method method-name="deleteMemberRemittance" short-description="Delete MemberRemittance">
        <entity-one entity-name="MemberRemittance" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>
    
    
        <!-- processNormalRemittanceReceived -->
    <simple-method method-name="processNormalRemittanceReceived" short-description="processNormalRemittanceReceived">
        <set field="normalRemittanceMonthYearId" from-field="parameters.normalRemittanceMonthYearId"/>
				<set field="processingStatus" value="${bsh:org.ofbiz.normalremittanceprocessing.NormalRemittanceProcessingServices.processNormalRemittanceReceived(normalRemittanceMonthYearId, userLogin);}"></set>
				<!-- success -->
				<if>
					<condition>
						<if-compare operator="not-equals" value="success" field="processingStatus"></if-compare>
					</condition>
					<then>
						<add-error> 
		                    <!-- fail-property resource="SalaryProcessingUiLabels.xml"  
		                        property="pullStationError" / --> 
		                        <fail-message message="${processingStatus}"/>
		                </add-error> 
		                <check-errors /> 
					</then>
					<else>
						 <property-to-field resource="NormalRemittanceProcessingUiLabels.xml" 
            				property="Successfully processed the remittance" field="successMessage" />
						
					</else>
				</if>
    </simple-method>
    
    <!-- deleteNormalRemittanceReceived -->
    <simple-method method-name="deleteNormalRemittanceReceived" short-description="deleteNormalRemittanceReceived">
        <set field="normalRemittanceMonthYearId" from-field="parameters.normalRemittanceMonthYearId"/>
				<set field="processingStatus" value="${bsh:org.ofbiz.normalremittanceprocessing.NormalRemittanceProcessingServices.deleteNormalRemittanceReceived(normalRemittanceMonthYearId, userLogin);}"></set>
				<!-- success -->
				<if>
					<condition>
						<if-compare operator="not-equals" value="success" field="processingStatus"></if-compare>
					</condition>
					<then>
						<add-error> 
		                    <!-- fail-property resource="SalaryProcessingUiLabels.xml"  
		                        property="pullStationError" / --> 
		                        <fail-message message="${processingStatus}"/>
		                </add-error> 
		                <check-errors /> 
					</then>
					<else>
						 <property-to-field resource="NormalRemittanceProcessingUiLabels.xml" 
            				property="Successfully deleted the unprocessed remittance" field="successMessage" />
						
					</else>
				</if>
    </simple-method>
    
    <!-- DividendYear -->
     <simple-method method-name="createDividendYear" short-description="Create DividendYear">
        <make-value entity-name="DividendYear" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set field="entityName" value="DividendYear"></set>
        <set field="newEntity.dividendYearId" value="${bsh:org.ofbiz.party.party.SaccoUtility.getNextSequenc(entityName);}"></set>
        <set field="newEntity.isActive" value="Y"/>
	    <set field="newEntity.createdBy" from-field="userLogin.userLoginId"/>
        <create-value value-field="newEntity"/>
    </simple-method>
    
     <simple-method method-name="updateDividendYear" short-description="Update DividendYear">
        <entity-one entity-name="DividendYear" value-field="lookedUpValue"/>
        <set-nonpk-fields value-field="lookedUpValue" map="parameters"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    
    <simple-method method-name="deleteDividendYear" short-description="Delete DividendYear">
        <entity-one entity-name="DividendYear" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>
    
    
    <!-- MemberDividend -->
        <simple-method method-name="createMemberDividend" short-description="Create MemberDividend">
        <make-value entity-name="MemberDividend" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set field="entityName" value="MemberDividend"></set>
        <set field="newEntity.memberDividendId" value="${bsh:org.ofbiz.party.party.SaccoUtility.getNextSequenc(entityName);}"></set>
        <set field="newEntity.isActive" value="Y"/>
	    <set field="newEntity.createdBy" from-field="userLogin.userLoginId"/>
        <create-value value-field="newEntity"/>
    </simple-method>
    
     <simple-method method-name="updateMemberDividend" short-description="Update MemberDividend">
        <entity-one entity-name="MemberDividend" value-field="lookedUpValue"/>
        <set-nonpk-fields value-field="lookedUpValue" map="parameters"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    
    <simple-method method-name="deleteMemberDividend" short-description="Delete MemberDividend">
        <entity-one entity-name="MemberDividend" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>
    
    <!-- processRemoveMemberDividend -->
    <simple-method method-name="processRemoveMemberDividend" short-description="processRemoveMemberDividend">
        <set field="dividendYearId" from-field="parameters.dividendYearId" type="Long"/>
				<set field="processingStatus" value="${bsh:org.ofbiz.normalremittanceprocessing.NormalRemittanceProcessingServices.removeAllMemberDividend(dividendYearId, userLogin);}"></set>
				<!-- success -->
				<if>
					<condition>
						<if-compare operator="not-equals" value="success" field="processingStatus"></if-compare>
					</condition>
					<then>
						<add-error> 
		                    <!-- fail-property resource="SalaryProcessingUiLabels.xml"  
		                        property="pullStationError" / --> 
		                        <fail-message message="${processingStatus}"/>
		                </add-error> 
		                <check-errors /> 
					</then>
					<else>
						 <property-to-field resource="NormalRemittanceProcessingUiLabels.xml" 
            				property="Successfully deleted" field="successMessage" />
						
					</else>
				</if>
    </simple-method>
    
    <!-- processMemberDividends -->
    <simple-method method-name="processMemberDividends" short-description="processMemberDividends">
        <set field="dividendYearId" from-field="parameters.dividendYearId" type="Long"/>
				<set field="processingStatus" value="${bsh:org.ofbiz.normalremittanceprocessing.NormalRemittanceProcessingServices.processMemberDividends(dividendYearId, userLogin);}"></set>
				<!-- success -->
				<if>
					<condition>
						<if-compare operator="not-equals" value="success" field="processingStatus"></if-compare>
					</condition>
					<then>
						<add-error> 
		                    <!-- fail-property resource="SalaryProcessingUiLabels.xml"  
		                        property="pullStationError" / --> 
		                        <fail-message message="${processingStatus}"/>
		                </add-error> 
		                <check-errors /> 
					</then>
					<else>
						 <property-to-field resource="NormalRemittanceProcessingUiLabels.xml" 
            				property="Successfully processed" field="successMessage" />
						
					</else>
				</if>
    </simple-method>
    
    
    <!-- DividendSourceAccount -->
    <simple-method method-name="createDividendSourceAccount" short-description="Create DividendSourceAccount">
        <make-value entity-name="DividendSourceAccount" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set field="entityName" value="DividendSourceAccount"></set>
        <set field="newEntity.dividendSourceAccountId" value="${bsh:org.ofbiz.party.party.SaccoUtility.getNextSequenc(entityName);}"></set>
        <set field="newEntity.isActive" value="Y"/>
	    <set field="newEntity.createdBy" from-field="userLogin.userLoginId"/>
        <create-value value-field="newEntity"/>
    </simple-method>
    
     <simple-method method-name="updateDividendSourceAccount" short-description="Update DividendSourceAccount">
        <entity-one entity-name="DividendSourceAccount" value-field="lookedUpValue"/>
        <set-nonpk-fields value-field="lookedUpValue" map="parameters"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    
    <simple-method method-name="deleteDividendSourceAccount" short-description="Delete DividendSourceAccount">
        <entity-one entity-name="DividendSourceAccount" value-field="lookedUpValue"/>
        <remove-value value-field="lookedUpValue"/>
    </simple-method>
    
    
</simple-methods>