<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor
	license agreements. See the NOTICE file distributed with this work for additional
	information regarding copyright ownership. The ASF licenses this file to
	you under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required
	by applicable law or agreed to in writing, software distributed under the
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
	OF ANY KIND, either express or implied. See the License for the specific
	language governing permissions and limitations under the License. -->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

	<!-- file types-->



	<simple-method method-name="createfiletype"
		short-description="Create File Type">
		<make-value entity-name="RegistryDocumentType" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryDocumentType" field="DocumentTypeId" />
		
		<set from-field="DocumentTypeId" field="newEntity.DocumentTypeId" />
		<create-value value-field="newEntity" />
		<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
	</simple-method>
	
	
	<simple-method method-name="createfileActionTypes"
		short-description="Create File Actions">
		<make-value entity-name="RegistryFileActionTypes" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActionTypes" field="fileActionTypeId" />

		<set from-field="fileActionTypeId" field="newEntity.fileActionTypeId" />
		<create-value value-field="newEntity" />
		<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
	</simple-method>
	
	<simple-method method-name="deletefileActionTypes"
		short-description="Remove an file type">
		<set field="fileActionTypeId" from-field="parameters.fileActionTypeId" />
		<entity-one entity-name="RegistryFileActionTypes" value-field="lookedUpValue" />
		<remove-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="DeleteSuccess" field="successMessage" />
	</simple-method>
	
	<simple-method method-name="updatefileActionTypes"
		short-description="Update an existing action">
		<entity-one entity-name="RegistryFileActionTypes" value-field="lookedUpValue" />
		<set-nonpk-fields map="parameters" value-field="lookedUpValue" />
		<set-pk-fields value-field="lookedUpValue" map="parameters" />
		<store-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />

	</simple-method>
	


	<simple-method method-name="updatefileType"
		short-description="Update an existing Budget">
		<entity-one entity-name="RegistryDocumentType" value-field="lookedUpValue" />
		<set-nonpk-fields map="parameters" value-field="lookedUpValue" />
		<set-pk-fields value-field="lookedUpValue" map="parameters" />
		<store-value value-field="lookedUpValue" />

	</simple-method>

	<simple-method method-name="deletefileType"
		short-description="Remove an file type">
		<set field="DocumentTypeId" from-field="parameters.DocumentTypeId" />
		<entity-one entity-name="RegistryDocumentType" value-field="lookedUpValue" />
		<remove-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="DeleteSuccess" field="successMessage" />
	</simple-method>
	
	
	<!-- ========================================= NON-MEMBER/PERSON RECORDS ================================================= -->
	
	<simple-method method-name="createNonMemberOrPersonRecord"
		short-description="Create File Actions">
		<make-value entity-name="NonmemberPlusPersonRecords" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="NonmemberPlusPersonRecords" field="entryNumber" />
		<now-timestamp field="nowTimestamp"/>

		<set from-field="entryNumber" field="newEntity.entryNumber" />
		<set from-field="nowTimestamp" field="newEntity.acquistionDate"/>
		<create-value value-field="newEntity" />
		
		<call-simple-method method-name="saveRecordForFiling" scope="inline"></call-simple-method>
		
		
		<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
	</simple-method>
	
	 <simple-method method-name="saveRecordForFiling">
    	<make-value entity-name="memberPlusPerson" value-field="partyEntity"/>
        <set-pk-fields map="parameters" value-field="partyEntity"/>
        <set-nonpk-fields map="parameters" value-field="partyEntity"/>
        <sequenced-id sequence-name="memberPlusPerson" field="memberPlusPersonId"/>
        <set field="partyEntity.memberPlusPersonId" from-field="memberPlusPersonId"/>
       <set field="partyEntity.partyId" from-field="memberPlusPersonId"/>
        <set field="partyEntity.firstName" from-field="parameters.objectName"/>
        <set field="partyEntity.lastName" from-field="parameters.objectName"/>
        <set field="partyEntity.securityLevel" from-field="parameters.securityLevel"/>
        <set field="partyEntity.idNumber" from-field="parameters.idNumber"/>
        <set field="partyEntity.fileType" value="OFFICIAL"/>
        <create-value value-field="partyEntity"/>
    </simple-method>
	
	
	<simple-method method-name="updateNonMemberOrPersonRecord"
		short-description="Update an existing action">
		<entity-one entity-name="NonmemberPlusPersonRecords" value-field="lookedUpValue" />
		<set-nonpk-fields map="parameters" value-field="lookedUpValue" />
		<set-pk-fields value-field="lookedUpValue" map="parameters" />
		<store-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />

	</simple-method>

<!-- files -->
	<simple-method method-name="creatememberFiles"
		short-description="Create File Book">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFiles" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />

		<entity-one value-field="member" entity-name="Member">
			<field-map field-name="partyId" value="${newEntity.partyId}"/>
		</entity-one>
		
		<set value="FNO-${newEntity.partyId}-${member.firstName}" field="newEntity.folioNo" />
		<set value="REGISTRY" field="newEntity.fileLocation" />
		<set value="AVAILABLE" field="newEntity.status" />
		<set value="ACTIVE" field="newEntity.stageStatus" />
		
		<set value="${member.payrollNumber}" field="newEntity.payrollNumber" />
		<set value="${member.memberNumber}" field="newEntity.memberNumber" />
		<set value="${member.firstName}" field="newEntity.firstName" />
		<set value="${member.lastName}" field="newEntity.lastName" />
		<set value="${member.idNumber}" field="newEntity.idNumber" />
		
		<set value="N" field="newEntity.isMemberInactive" />
		<set value="N" field="newEntity.isReadyForSemiActive" />
		<set value="N" field="newEntity.isReadyForArchive" />
		<set value="N" field="newEntity.isReadyForDisposal" />
		
		<set value="${userLogin.partyId}" field="newEntity.creator" />
		<set from-field="nowTimestamp" field="newEntity.creationDate"/>
		<set field="party" value="${newEntity.partyId}"/>
		<set field="exist" value="${bsh:org.ofbiz.registry.FileServices.findExistanceOfFile(party);}"/>
		<set field="valid" value="INVALID"/>
		
		<if>
			<condition>
					<if-compare-field field="exist"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="FileExist" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			   <create-value value-field="newEntity" />
		      <call-simple-method method-name="createfileFirstVolume" scope="inline"></call-simple-method>
		      <property-to-field resource="HumanResUiLabels"
			  property="CreateSuccess" field="successMessage" />
			</else>
		</if>
		
		
		
	</simple-method>
	
	
	<!-- ====================== CREATE FILE VOLUME ONE ========================= -->
	
	<simple-method method-name="createfileFirstVolume"	short-description="Create File Actions">
		<make-value entity-name="RegistryFileVolume" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileVolume" field="volumeId" />
		<set from-field="volumeId" field="newEntity.volumeId" />
		<set field="newEntity.partyId" from-field="parameters.partyId"/>
		<set field="newEntity.volumeStatus" value="OPEN"/>
		<set field="newEntity.volumeIdentifier" value="Volume 1"/>
		<create-value value-field="newEntity" />
	</simple-method>
	

	<simple-method method-name="updateFiles"
		short-description="Update an existing Budget">
		<entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
		<set-nonpk-fields map="parameters" value-field="lookedUpValue" />
		<set-pk-fields value-field="lookedUpValue" map="parameters" />
		<store-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />

	</simple-method>
	
	 <!-- ============================== DEACTIVATE FILE ================================== -->
     <simple-method method-name="deactivateFile"
        short-description="Change staff confirmation date">
        <entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" />
        
        <now-timestamp field="nowTimestamp" />
		<set from-field="nowTimestamp" field="lookedUpValue.inactiveStartDate" />
        
        <set field="lookedUpValue.stageStatus" value="INACTIVE"/>
        <set field="lookedUpValue.fileBox" from-field="parameters.fileBox"/>
        <set field="lookedUpValue.fileBoxCode" from-field="parameters.fileBoxCode"/>
        
        <call-simple-method method-name="saveFileVolumeInAbox" scope="inline"></call-simple-method>
        <store-value value-field="lookedUpValue" />
        <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
        </simple-method>
        
       
     <simple-method method-name="saveFileVolumeInAbox" short-description="Change staff confirmation date">
       <!--  <entity-one entity-name="RegistryFileVolume" value-field="lookedUpValue" /> 
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" /> -->
        

		<entity-condition list="openVolList" entity-name="RegistryFileVolume">
			<condition-list combine="and">
				<condition-expr field-name="partyId" from-field="parameters.partyId"/>
				<condition-expr field-name="volumeStatus" value="OPEN"/>
			</condition-list>
		</entity-condition>
		
		
		
		<iterate entry="singleOpenVol" list="openVolList">
		<log message=">>>>>>>>>>>>>>>>>>>>>>> VOLUME-DETAILS ${singleOpenVol.volumeId}" level="info"/>
		<entity-one value-field="openVol" entity-name="RegistryFileVolume">
			<field-map field-name="volumeId" from-field="singleOpenVol.volumeId"/>
		</entity-one>
		
		
		  <set field="openVol.fileBoxCode" from-field="parameters.fileBoxCode"/>
          <set field="openVol.fileBox" from-field="parameters.fileBox"/>
		 <store-value value-field="openVol" />
		</iterate>
		
        </simple-method>
		
		
        
	
	  <!-- ==============================MOVE FILE TO SEMI-ACTIVE================================== -->
     <simple-method method-name="moveToSemiActive"
        short-description="Change staff confirmation date">
        <entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" />
        
        <now-timestamp field="nowTimestamp" />
		<set from-field="nowTimestamp" field="lookedUpValue.SemiActiveStartDate" />
		
		<entity-one entity-name="RegistryFiles" value-field="req">
		 	<field-map field-name="partyId" from-field="parameters.partyId"/>
		 </entity-one>
        
        <set field="lookedUpValue.stageStatus" value="SEMIACTIVE"/>
         <set field="lookedUpValue.fileBox" from-field="parameters.fileBox"/>
        <set field="lookedUpValue.fileBoxCode" from-field="parameters.fileBoxCode"/>
        
		
		<set field="inactiveStartDate" from-field="req.inactiveStartDate"/>
		<set field="userMove" value="${bsh:org.ofbiz.registry.FileServices.getIsReadyToMoveToSemiActiveState(inactiveStartDate);}"/>
		<set field="valid" value="NOT-YET"/>
		 <if>
			<condition>
					<if-compare-field field="userMove"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="HumanResUiLabels"
						property="EarlyMoveError" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			<call-simple-method method-name="saveFileVolumeInAbox" scope="inline"></call-simple-method>
			<store-value value-field="lookedUpValue" />
            <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
			</else>
		</if>
		
        </simple-method>
        
          <!-- ==============================MOVE FILE TO ARCHIVE================================== -->
        <simple-method method-name="moveToArchive"
        short-description="Change staff confirmation date">
        <entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" />
        
         <now-timestamp field="nowTimestamp" />
		<set from-field="nowTimestamp" field="lookedUpValue.ArchiveStartDate" />
        
         <set field="lookedUpValue.stageStatus" value="ARCHIVED"/>
          <set field="lookedUpValue.fileBox" from-field="parameters.fileBox"/>
        <set field="lookedUpValue.fileBoxCode" from-field="parameters.fileBoxCode"/>
        
		
		<entity-one entity-name="RegistryFiles" value-field="req">
		 	<field-map field-name="partyId" from-field="parameters.partyId"/>
		 </entity-one>
		
		<set field="inactiveStartDate" from-field="req.SemiActiveStartDate"/>
		<set field="userMove" value="${bsh:org.ofbiz.registry.FileServices.getIsReadyToMoveToArchiveState(inactiveStartDate);}"/>
		<set field="valid" value="NOT-YET"/>
		 <if>
			<condition>
					<if-compare-field field="userMove"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="HumanResUiLabels"
						property="EarlyMoveError" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			<call-simple-method method-name="saveFileVolumeInAbox" scope="inline"></call-simple-method>
			<store-value value-field="lookedUpValue" />
            <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
			</else>
		</if>
        </simple-method>
          <!-- ==============================MOVE FILE FOR DISPOSAL================================== -->
     <simple-method method-name="moveToDisposal"
        short-description="Change staff confirmation date">
        <entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" />
        
          <now-timestamp field="nowTimestamp" />
		<set from-field="nowTimestamp" field="lookedUpValue.DisposalStartDate" />
        
        <set field="lookedUpValue.stageStatus" value="DISPOSAL"/>
         <set field="lookedUpValue.fileBox" from-field="parameters.fileBox"/>
        <set field="lookedUpValue.fileBoxCode" from-field="parameters.fileBoxCode"/>
        
		
		<entity-one entity-name="RegistryFiles" value-field="req">
		 	<field-map field-name="partyId" from-field="parameters.partyId"/>
		 </entity-one>
		
		<set field="inactiveStartDate" from-field="req.ArchiveStartDate"/>
		<set field="userMove" value="${bsh:org.ofbiz.registry.FileServices.getIsReadyToMoveToDisposalState(inactiveStartDate);}"/>
		<set field="valid" value="NOT-YET"/>
		 <if>
			<condition>
					<if-compare-field field="userMove"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="HumanResUiLabels"
						property="EarlyMoveError" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			<call-simple-method method-name="saveFileVolumeInAbox" scope="inline"></call-simple-method>
			<store-value value-field="lookedUpValue" />
            <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
			</else>
		</if>
		
        </simple-method>
        
         <!-- ==============================MOVE FILE TO DECEASED================================== -->
     <simple-method method-name="deceasedMember"
        short-description="Change staff confirmation date">
        <entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" />
        
          <now-timestamp field="nowTimestamp" />
		<set from-field="nowTimestamp" field="lookedUpValue.deceasedStartDate" />
        
        <set field="lookedUpValue.stageStatus" value="DECEASED"/>
         <set field="lookedUpValue.fileBox" from-field="parameters.fileBox"/>
        <set field="lookedUpValue.fileBoxCode" from-field="parameters.fileBoxCode"/>
        <call-simple-method method-name="saveFileVolumeInAbox" scope="inline"></call-simple-method>
        <store-value value-field="lookedUpValue" />
        <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
        </simple-method>
        
          <!-- ============================== ACTIVATE FILE ================================== -->
     <simple-method method-name="activateFile"
        short-description="Change staff confirmation date">
        <entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" />
        
        <!--   <now-timestamp field="nowTimestamp" />
		<set from-field="nowTimestamp" field="lookedUpValue.deceasedStartDate" /> -->
        
        <set field="lookedUpValue.stageStatus" value="ACTIVE"/>
        <set field="lookedUpValue.status" value="AVAILABLE"/>
        <store-value value-field="lookedUpValue" />
        <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
        </simple-method>
        
        
        <simple-method method-name="updateStatusPeriods" short-description="Update status periods">
		<entity-one entity-name="RegistryFileSetting" value-field="lookedUpValue" />
		<set-nonpk-fields value-field="lookedUpValue" map="parameters" />
		<store-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
	</simple-method>
	
	<!--  <simple-method method-name="updateMaxNoOfFiles" short-description="Update status periods">
		<entity-one entity-name="RegistryFileSettingMaxNumberOfFilesPerUser" value-field="lookedUpValue" />
		<set-nonpk-fields value-field="lookedUpValue" map="parameters" />
		<store-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
	</simple-method> -->
	
	 <simple-method method-name="updateMaxNoOfFiles" short-description="Add Bank Details">
        <make-value entity-name="RegistryFileSettingMaxNumberOfFilesPerUser" value-field="newEntity"/>
         <set-pk-fields map="parameters" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <sequenced-id sequence-name="RegistryFileSettingMaxNumberOfFilesPerUser" field="maxId"/>
        <set field="newEntity.maxId" from-field="maxId"/>
        
         <set field="valid" value="INVALID"/>
         <set field="text" from-field="newEntity.maxNumber"/>
        <set field="userInput" value="${bsh:org.ofbiz.registry.FileServices.isMaxEntryInteger(text);}" type="String" /> 
        
        <log message=">>>>>>>>>>>>>>>>********************************>>>>>>>ISVALID === ${userInput}" level="info"/>
        <if>
			<condition>
					<if-compare-field field="userInput"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="HumanResUiLabels"
						property="IntegerInputError" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			    <create-value value-field="newEntity"/>
				<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
			</else>
		</if>
    </simple-method>
        
        
        
         <!-- ==============================UPDATE MOVE STATUS================================== -->
       <!--  <simple-method method-name="inactiveFiles"  short-description="Change staff confirmation date">sdsds
        <entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" />
        <set field="inactiveStartDate" from-field="lookedUpValue.inactiveStartDate"/>
        <set field="lookedUpValue.moveStatus" value="${bsh:org.ofbiz.registry.FileServices.getIsReadyToMoveToSemiActiveState(inactiveStartDate);}"/>
        <store-value value-field="lookedUpValue" />
        </simple-method> -->
        
	<!-- ========================= FILE VOLUME ======================================== -->
	
	
	<simple-method method-name="createfileVolume"
		short-description="Create File Actions">
		<make-value entity-name="RegistryFileVolume" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileVolume" field="volumeId" />
		<set from-field="volumeId" field="newEntity.volumeId" />
		<set field="partyId" from-field="parameters.partyId"/>
		<set field="newEntity.volumeStatus" value="OPEN"/>
		<create-value value-field="newEntity" />
		<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage"/>
	</simple-method>
	
	<simple-method method-name="updatefileVolume"
		short-description="Update an existing action">
		<entity-one entity-name="RegistryFileVolume" value-field="lookedUpValue" />
		<set-nonpk-fields map="parameters" value-field="lookedUpValue" />
		<set-pk-fields value-field="lookedUpValue" map="parameters" />
		<store-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />

	</simple-method>
	
	 <!-- ============================== CLOSE A FILE VOLUME ================================== -->
     <simple-method method-name="closeFileVolume"
        short-description="Change staff confirmation date">
        <entity-one entity-name="RegistryFileVolume" value-field="lookedUpValue" />
        <set-nonpk-fields value-field="lookedUpValue" map="parameters" />
        
        <set field="lookedUpValue.volumeStatus" value="CLOSED"/>
         <set field="lookedUpValue.fileBoxCode" from-field="parameters.fileBoxCode"/>
          <set field="lookedUpValue.fileBox" from-field="parameters.fileBox"/>
        <store-value value-field="lookedUpValue" />
        <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
        </simple-method>
     

	<!-- ==========================FILE REQUEST================================== -->
	
	<simple-method method-name="requestfiles" short-description="request File ">
	
		 <set field="partyId" value="${parameters.partyId}"/>
		 
		 <entity-one entity-name="RegistryFiles" value-field="req">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 
		 
		 
         <set field="valid" value="INVALID"/>
         <set field="requestedbyEarlier" from-field="req.actionBy"/>
         <set field="requestedbyHasFile" from-field="req.currentPossesser"/>
         <set field="text" value="${userLogin.partyId}"/>
        <set field="userInput" value="${bsh:org.ofbiz.registry.FileServices.findnoOfOfFileperUser(text) ;}" type="String" /> 
        <set field="newRequester" value="${bsh:org.ofbiz.registry.FileServices.ifnewRequesterPartyHasBeenQued(partyId,text);}"/>
        
        <log message=">>>>>>>>>>>>>>>>********************************>>>>>>>ISVALID === ${newRequester}" level="info"/>
        
         <if>
         
			<condition>
			<if-compare-field field="requestedbyHasFile"	to-field="text" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="AlreadyHaveFileError" />
				</add-error>
				<check-errors />
			</then>
			</if>
        
            <if>
			<condition>
					<if-compare-field field="newRequester"
						to-field="valid" operator="equals" />
						
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="AlreadyRequestedError" />
				</add-error>
				<check-errors />
			</then>
			</if>
			   
        <if>
			<condition>
					<if-compare-field field="requestedbyEarlier"
						to-field="text" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="AlreadyRequestedError" />
				</add-error>
				<check-errors />
			</then>
			</if>
			<if>
			<condition>
					<if-compare-field field="userInput"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="MaxFilesError" />
				</add-error>
				<check-errors />
			</then>
			
			
			<else>
			
		<entity-one entity-name="RegistryFiles" value-field="registryFileStatus">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		<set field="fileStatus" from-field="registryFileStatus.status"/>
			
			
			
			
			  <if>
			<condition>
					<if-compare operator="not-equals" value="AVAILABLE" field="fileStatus"/>
			</condition>
			<then>
				<call-simple-method method-name="queuFileRequest" scope="inline"></call-simple-method>
				
			</then>
			
			<else>
			
			
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>

		 <!-- Get status -->
		 <set value="${userLogin.partyId}" field="registryFile.actionBy" />
		 <set field="registryFile.status" value="REQUESTED"/>
		 <set field="registryFile.selectedToBeMoved" value="REQUESTED"/>
		 <set field="registryFile.Reason" from-field="parameters.Reason"/>
		
		<entity-one value-field="memberBranch" entity-name="Member">
		<field-map field-name="partyId" from-field="partyId"/>
		</entity-one>
		
		   <entity-condition list="regStaff" entity-name="RegistryStaff">
				<condition-expr field-name="branchId" from-field="memberBranch.branchId"/>
		</entity-condition>
		
		
		<iterate entry="email" list="regStaff">
        
        <set field="emailparty" value="${email.partyId}"/>
		 <call-simple-method method-name="fileRequestEmailInformation" scope="inline"></call-simple-method>
		</iterate>
			    <store-value value-field="registryFile" />
			    <call-simple-method method-name="saveRequestAction" scope="inline"></call-simple-method>
		        <call-simple-method method-name="saveRequestActionToLogs" scope="inline"></call-simple-method>
				 <call-simple-method method-name="setFileMovementGrouper" scope="inline"></call-simple-method>
                
        
				<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
			
			
			</else>
			</if>
			
			
			</else>
		</if>
		
	</simple-method>
	
	<simple-method method-name="queuFileRequest">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileRequestQueu" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileRequestQueu" field="queId" />
		<set from-field="queId" field="newEntity.queId" />
		<set value="${userLogin.partyId}" field="newEntity.requester" />
		<set field="newEntity.requestDate" from-field="nowTimestamp" />
		<set field="newEntity.partyId" from-field="parameters.partyId" />
		<set field="newEntity.Reason" from-field="parameters.Reason" />
		<create-value value-field="newEntity" />
		
		<property-to-field resource="HumanResUiLabels"
	  property="successRequestQueuing" field="successMessage" />
	</simple-method>
	
	
	<simple-method method-name="saveRequestAction">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Request"/>
		
		<create-value value-field="newEntity" />
	</simple-method>
	<simple-method method-name="saveRequestActionToLogs">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Request"/>
		<set field="newEntity.currentPossesser" value="REGISTRY" />
		 <set field="newEntity.Reason" from-field="parameters.Reason"/>
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="saveRequestedFile">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryRequestedFiles" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<log message=">>>>>>>>>>>>>>>>>>>>>>>PARAMETERS ${parameters}" level="info"/>
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.creationDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<set field="newEntity.Reason" from-field="parameters.Reason" />
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	 <simple-method method-name="fileRequestEmailInformation">
		<make-value entity-name="StaffScheduledMail" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="StaffScheduledMail" field="msgId" />
		<set from-field="msgId" field="newEntity.msgId" />
		
		<set field="party" from-field="parameters.partyId"/> 
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="party"/>
		 </entity-one>
		 
		 <entity-one entity-name="Person" value-field="requester">
		 	<field-map field-name="partyId" from-field="userLogin.partyId"/>
		 </entity-one>
		 
		 <set field="newEntity.partyId" from-field="emailparty"/> 
		<set field="newEntity.body" value="A file belonging to:- [${reg.firstName} ${reg.lastName}] -Payroll Number:- [reg.payrollNumber] has been requested by:- [${requester.firstName} ${requester.lastName} (payroll-${requester.employeeNumber})]. Please log onto the system for details. " />
		 <set field="newEntity.subject" value="File Request"/>
		<set field="newEntity.sendStatus" value="NOTSEND" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	
	<!-- ========================== APPROVE FILE ISSUANCE ================================== -->
	
	<simple-method method-name="approveFileIssuance" short-description="request File ">
	<log message="=====================PLEASE SHOW ${parameters}" level="info"/>
	<call-simple-method method-name="saveAuthorizationFileAction" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveAuthorizationActionToLogs" scope="inline"></call-simple-method>
	
	<set field="party" from-field="parameters.partyId"/>
		
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>

		 <set value="${userLogin.partyId}" field="registryFile.actionBy"/>
		 <set field="registryFile.approvalStatus" value="Approved"/>
		<store-value value-field="registryFile"/>
	</simple-method>
	
	<simple-method method-name="saveAuthorizationFileAction">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Approved File Issuance"/>
		
		<create-value value-field="newEntity" />
		
	</simple-method>
	
	<simple-method method-name="saveAuthorizationActionToLogs">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Approved File Issuance"/>
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<set field="newEntity.Reason" from-field="reg.Reason"/>
		
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	<!-- ========================== DISAPPROVE FILE ISSUANCE ================================== -->
	
	<simple-method method-name="disapproveFileIssuance" short-description="request File ">
	<log message="=====================PLEASE SHOW ${parameters}" level="info"/>
	<call-simple-method method-name="saveAuthorizationFileAction2" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveAuthorizationActionToLogs2" scope="inline"></call-simple-method>
	
	<set field="party" from-field="parameters.partyId"/>
		
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 

		 <set value="${userLogin.partyId}" field="registryFile.actionBy"/>
		 <set field="registryFile.approvalStatus" value="Disapproved"/>
		 <set field="registryFile.status" value="AVAILABLE"/>
		<store-value value-field="registryFile"/>
	</simple-method>
	
	<simple-method method-name="saveAuthorizationFileAction2">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Disapproved File Issuance"/>
		
		<create-value value-field="newEntity" />
		
	</simple-method>
	
	<simple-method method-name="saveAuthorizationActionToLogs2">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Disapproved File Issuance"/>
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<set field="newEntity.Reason" from-field="reg.Reason"/>
		
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	                <!-- SELECT FILES TO ISSUE -->
					
		<simple-method method-name="selectFilesToIssue"
		short-description="Update Family Relations">
		<entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
		<set-nonpk-fields value-field="lookedUpValue" map="parameters" />
		<set field="lookedUpValue.selectedToBeMoved" value="SELECTED_FOR_ISSUE"/>
		<set field="lookedUpValue.carriedBy" from-field="parameters.carriedBy" />
		
		 
         <set field="valid" value=""/>
         <set field="text" from-field="parameters.carriedBy"/>
		
		<if>
			<condition>
					<if-compare-field field="text"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="BlankError" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			 
		 <store-value value-field="lookedUpValue" />
        
			<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
			</else>
		</if>
		
	</simple-method>
	
	 <!-- SELECT FILES TO DIVERT -->
					
		<simple-method method-name="selectFilesToDivert"
		short-description="Update Family Relations">
		<entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
		<set-nonpk-fields value-field="lookedUpValue" map="parameters" />
		<set field="lookedUpValue.selectedToBeMoved" value="SELECTED_FOR_DIVERT"/>
		<set field="lookedUpValue.carriedBy" from-field="parameters.carriedBy" />
		<set field="lookedUpValue.currentPossesser" from-field="parameters.currentPossesser" />
		
		<set field="valid" value=""/>
         <set field="text" from-field="parameters.carriedBy"/>
		 <set field="text2" from-field="parameters.currentPossesser"/>
		<set field="text3" value="${userLogin.partyId}"/>
		
		<if>
			<condition>
					<if-compare-field field="text2"
						to-field="text3" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="ToOneselfError" />
				</add-error>
				<check-errors />
			</then>
			</if>
			
		    <if>
			<condition>
					<if-compare-field field="text"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="BlankError" />
				</add-error>
				<check-errors />
			</then>
			</if>
			
			<if>
			<condition>
					<if-compare-field field="text2"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="BlankError" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			 
		 <store-value value-field="lookedUpValue" />
        
			<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
			</else>
		</if>
		
	</simple-method>
	
	 <!-- SELECT FILES TO RETURN TO REGISTRY -->
					
		<simple-method method-name="selectFilesToRegistry"
		short-description="Update Family Relations">
		<entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
		<set-nonpk-fields value-field="lookedUpValue" map="parameters" />
		<set field="lookedUpValue.selectedToBeMoved" value="SELECTED_FOR_RETURN_TO_REGISTRY"/>
		<set field="lookedUpValue.carriedBy" from-field="parameters.carriedBy" />
		
		<set field="valid" value=""/>
         <set field="text" from-field="parameters.carriedBy"/>
		
		<if>
			<condition>
					<if-compare-field field="text"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="BlankError" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			 
		 <store-value value-field="lookedUpValue" />
        
			<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
			</else>
		</if>
		
	</simple-method>
	
	 <!-- SELECT FILES TO SEND TO ANOTHER STAFF -->
					
		<simple-method method-name="selectFilesToAnotherStaff"
		short-description="Update Family Relations">
		<entity-one entity-name="RegistryFiles" value-field="lookedUpValue" />
		<set-nonpk-fields value-field="lookedUpValue" map="parameters" />
		<set field="lookedUpValue.selectedToBeMoved" value="SELECTED_FOR_ANOTHER_STAFF"/>
		<set field="lookedUpValue.carriedBy" from-field="parameters.carriedBy" />
		<set field="lookedUpValue.intendedPossesser" from-field="parameters.intendedPossesser" />
		
		
		<set field="valid" value=""/>
         <set field="text" from-field="parameters.carriedBy"/>
		 <set field="text2" from-field="parameters.intendedPossesser"/>
		 <set field="text3" value="${userLogin.partyId}"/>
		
		<if>
			<condition>
					<if-compare-field field="text2"
						to-field="text3" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="ToOneselfError" />
				</add-error>
				<check-errors />
			</then>
			</if>
			
			<if>
			<condition>
					<if-compare-field field="text"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="BlankError" />
				</add-error>
				<check-errors />
			</then>
			</if>
			
			<if>
			<condition>
					<if-compare-field field="text2"
						to-field="valid" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="BlankError" />
				</add-error>
				<check-errors />
			</then>
			
			<else>
			 
		 <store-value value-field="lookedUpValue" />
        
			<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
			</else>
		</if>
	</simple-method>
					
	
	
	<!-- ==========================FILE ISSUE================================== -->
	
	<simple-method method-name="issuefiles" short-description="request File ">
	   
			   
		  
		  
		 
		 <set field="partyId" value="${parameters.partyId}"/>
		 
		 
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 
		 
		
		
	
		 
		 <set field="userReq" value="ISSUED"/>
		 <set field="iss" from-field="registryFile.status"/>
		 
        <if>
			<condition>
					<if-compare-field field="userReq"
						to-field="iss" operator="equals" />
			</condition>
			<then>
				<add-error>
					<fail-property resource="RegistryUiLabels"
						property="AlreadyIssuedError" />
				</add-error>
				<check-errors />
			</then>
			<else>
            <now-timestamp field="nowTimestamp"/>
           <entity-one entity-name="RegistryFileActivity" value-field="activity">
		 	<field-map field-name="activityId" from-field="registryFile.Reason"/>
		 </entity-one>
		 
		 <!-- Get status -->
		 <set value="${userLogin.partyId}" field="registryFile.actionBy" />
		 <set field="registryFile.status" value="ISSUED"/>
		 <set field="registryFile.selectedToBeMoved" value="ISSUED"/>
		 <set field="registryFile.issueDate" from-field="nowTimestamp" />
		 
		  <set field="start" from-field="nowTimestamp"/>
		  <set field="duration" from-field="activity.activityDuration"/>
		 
		 
		 <set field="registryFile.activityDuration" from-field="activity.activityDuration" />
		 
		 <set field="registryFile.issueDate" from-field="nowTimestamp" />
		 
		  <set field="registryFile.recieptStatus" value="NOTRECEIVED"/>
		  <set field="registryFile.currentPossesser" from-field="parameters.actionBy" />
		 <set field="email_party" from-field="parameters.actionBy"/>
		

			
			<call-simple-method method-name="saveIssueAction" scope="inline"></call-simple-method>
		  <call-simple-method method-name="saveIssueActionToLogs" scope="inline"></call-simple-method>
		  <call-simple-method method-name="saveIssueActionToFileMovement" scope="inline"></call-simple-method>
		  <call-simple-method method-name="saveIssueEmailInformation" scope="inline"></call-simple-method>
		  <store-value value-field="registryFile" />
			</else>
			</if>
	
	
	
		 
	</simple-method>
	
	<simple-method method-name="deletefileFromRequested"
		short-description="Remove an file">
		<set field="partyId" from-field="parameters.partyId" />
		<entity-one entity-name="RegistryRequestedFiles" value-field="lookedUpValue" />
		<remove-value value-field="lookedUpValue" />
	</simple-method>
	
	<simple-method method-name="saveIssueAction">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="File Issue"/>
		
		<entity-one entity-name="RegistryFiles" value-field="regi">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		<set field="newEntity.carriedBy" from-field="regi.carriedBy" />
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	
	<simple-method method-name="saveIssueActionToLogs">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="File Issue"/>
		<set field="newEntity.currentPossesser" from-field="parameters.actionBy" />
		<set field="newEntity.receiptStatus" value="NOT RECEIVED"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		<set field="newEntity.interActivityDuration" value="${${bsh:org.ofbiz.registry.FileServices.getDurationBtnRequestAndIssue(partyId);}}" type="String"/>
		
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<set field="newEntity.Reason" from-field="reg.Reason"/>
		
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="saveIssueActionToFileMovement">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileMovement" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileMovement" field="movementId" />
		<set from-field="movementId" field="newEntity.movementId" />
		<set value="${userLogin.partyId}" field="newEntity.releasedBy" />
		<set field="newEntity.timeOut" from-field="nowTimestamp" />
		<set field="newEntity.fromRegistry" value="Y" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.releasedTo" from-field="parameters.actionBy"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		 <set field="newEntity.activityCode" from-field="parameters.Reason"/>
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 
		 <entity-condition list="grouper" entity-name="RegistryFileMovementGrouping">
				<condition-expr field-name="partyId" from-field="partyId"/>
		</entity-condition>
		
		<iterate entry="singleOpenVol" list="grouper">
		<log message=">>>>>>>>>>>>>>>>>>>>>>> VOLUME-DETAILS ${singleOpenVol.volumeId}" level="info"/>
		<entity-one value-field="openVol" entity-name="RegistryFileMovementGrouping">
			<field-map field-name="groupId" from-field="singleOpenVol.groupId"/>
		</entity-one>
		
		<set field="newEntity.grouper" from-field="openVol.groupId" />
		</iterate>
		
		<set field="newEntity.memberNumber" from-field="reg.memberNumber" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="saveIssueEmailInformation">
		<make-value entity-name="StaffScheduledMail" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="StaffScheduledMail" field="msgId" />
		<set from-field="msgId" field="newEntity.msgId" />
		<set field="newEntity.partyId" from-field="email_party"/>
		<set field="newEntity.body" value="The File(s) you requested has/have been released by Registry. If you don't receive the file(s), please communicate to Registry" />
		 <set field="newEntity.subject" value="Requested Files"/>
		<set field="newEntity.sendStatus" value="NOTSEND" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	<!-- ==========================FILE DIVERT================================== -->
	
	<simple-method method-name="divertfiles" short-description="request File ">
		 <call-simple-method method-name="saveDivertAction" scope="inline"></call-simple-method>
		  <call-simple-method method-name="saveDivertActionToLogs" scope="inline"></call-simple-method>
		   <call-simple-method method-name="saveDivertActionToFileMovement" scope="inline"></call-simple-method>
		 
		 <set field="partyId" value="${newEntity.partyId}"/>
		 
		 
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 
		 <!-- Get status -->
		 <set value="${userLogin.partyId}" field="registryFile.actionBy" />
		  <set field="registryFile.recieptStatus" value="NOTRECEIVED"/>
		  <set field="registryFile.currentPossesser" from-field="parameters.currentPossesser" />
		  <set field="registryFile.carriedBy" from-field="parameters.carriedBy" />
		   <set field="registryFile.selectedToBeMoved" value="DIVERTED"/>
		<store-value value-field="registryFile" />
		
		<set field="email_divert_party" from-field="parameters.currentPossesser"/>
		<call-simple-method method-name="saveDivertEmailInformation" scope="inline"></call-simple-method>
	</simple-method>
	
	
	<simple-method method-name="saveDivertAction">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="File Divert"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	
	<simple-method method-name="saveDivertActionToLogs">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="File Divert"/>
		<set field="newEntity.currentPossesser" from-field="parameters.currentPossesser" />
		<set field="newEntity.receiptStatus" value="NOT RECEIVED"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<set field="newEntity.Reason" from-field="reg.Reason"/>
		
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="saveDivertActionToFileMovement">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileMovement" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileMovement" field="movementId" />
		<set from-field="movementId" field="newEntity.movementId" />
		<set value="${userLogin.partyId}" field="newEntity.releasedBy" />
		<set field="newEntity.timeOut" from-field="nowTimestamp" />
		<set field="newEntity.fromRegistry" value="Y" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.releasedTo" from-field="parameters.currentPossesser"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		 
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 
		  <entity-condition list="grouper" entity-name="RegistryFileMovementGrouping">
				<condition-expr field-name="partyId" from-field="partyId"/>
		</entity-condition>
		
		<iterate entry="singleOpenVol" list="grouper">
		<log message=">>>>>>>>>>>>>>>>>>>>>>> VOLUME-DETAILS ${singleOpenVol.volumeId}" level="info"/>
		<entity-one value-field="openVol" entity-name="RegistryFileMovementGrouping">
			<field-map field-name="groupId" from-field="singleOpenVol.groupId"/>
		</entity-one>
		
		
		<set field="newEntity.grouper" from-field="openVol.groupId" />
		</iterate>
		
		<set field="newEntity.activityCode" from-field="reg.Reason"/>
		<set field="newEntity.memberNumber" from-field="reg.memberNumber" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="saveDivertEmailInformation">
		<make-value entity-name="StaffScheduledMail" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="StaffScheduledMail" field="msgId" />
		<set from-field="msgId" field="newEntity.msgId" />
		<set field="newEntity.partyId" from-field="email_divert_party"/>
		<set field="newEntity.body" value="The File(s) you requested has/have been released by Registry. If you don't receive the file(s), please communicate to Registry" />
		 <set field="newEntity.subject" value="Requested Files"/>
		<set field="newEntity.sendStatus" value="NOTSEND" />
		<create-value value-field="newEntity" />
	</simple-method>
	

<!-- ========================== RECEIVE FILE ================================== -->
	
	<simple-method method-name="recieveFiles" short-description="request File ">
	<log message="=====================PLEASE SHOW ${parameters}" level="info"/>
	<call-simple-method method-name="saveRecieveFileAction" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveRecieveActionToLogs" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveFileReceiveActionToFileMovement" scope="inline"></call-simple-method>
	
	<set field="party" from-field="parameters.partyId"/>
		
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 
		  <entity-one entity-name="Person" value-field="person">
		 	<field-map field-name="partyId" from-field="userLogin.partyId"/>
		 </entity-one>

		 <set value="${userLogin.partyId}" field="registryFile.actionBy"/>
		 <set field="registryFile.fileLocation" from-field="person.departmentId"/>
		 <set field="registryFile.recieptStatus" value="RECEIVED"/>
		<store-value value-field="registryFile"/>
	</simple-method>
	
	<simple-method method-name="saveRecieveFileAction">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Receive File"/>
		
		
		
		<create-value value-field="newEntity" />
		
	</simple-method>
	
	<simple-method method-name="saveRecieveActionToLogs">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Receive File"/>
		<set field="newEntity.currentPossesser" value="${userLogin.partyId}" />
		<set field="newEntity.receiptStatus" value="RECEIVED"/>
		
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		<set field="newEntity.carriedBy" from-field="reg.carriedBy" />
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<set field="newEntity.Reason" from-field="reg.Reason"/>
		
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	  <simple-method method-name="saveFileReceiveActionToFileMovement"
        short-description="File receive">
        <now-timestamp field="nowTimestamp"/>
       
        <set field="partyId" from-field="parameters.partyId"/>
        <set field="party" value="${userLogin.partyId}"/>
        <set field="time" value="${bsh:org.ofbiz.registry.FileServices.getDateOfReceivedFile(partyId, party);}" type="Timestamp"/>
        <log message="=====================PLEASE SHOW TIME >> ${time} Party>${partyId} releasedto > ${party}" level="info"/>
        
        
        <entity-condition list="dateList" entity-name="RegistryFileMovement">
				<condition-expr field-name="timeOut" from-field="time"/>
		</entity-condition>
		
		<iterate entry="singleOpenVol" list="dateList">
		<log message=">>>>>>>>>>>>>>>>>>>>>>> TIME-OUT >> ${singleOpenVol.movementId}" level="info"/>
        
        <entity-one entity-name="RegistryFileMovement" value-field="regMove">
		 	<field-map field-name="movementId" value="${singleOpenVol.movementId}"/>
		 </entity-one>
		 
        
        <set field="regMove.timeIn" from-field="nowTimestamp"/>
         <set field="regMove.receivedBy" value="${userLogin.partyId}"/>
        <store-value value-field="regMove" />
        </iterate>
    </simple-method>
	
	
	<!-- ==========================FILE RELEASE================================== -->
	
	<simple-method method-name="releasefiles" short-description="request File ">
	<call-simple-method method-name="saveReleaseAction" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveReleaseActionToLogs" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveReleaseToRegistryActionToFileMovement" scope="inline"></call-simple-method>
	
		 
		 <set field="partyId" value="${newEntity.partyId}"/>
		 
		 
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>

		 <!-- Get status -->
		 <set value="${userLogin.partyId}" field="registryFile.actionBy" />
		 <set field="registryFile.recieptStatus" value="RELEASED"/>
		 <set field="registryFile.selectedToBeMoved" value="RELEASED"/>
		 <set field="registryFile.carriedBy" from-field="parameters.carriedBy" />
		<store-value value-field="registryFile"/>
		
		
		
		
	<entity-one value-field="memberBranch" entity-name="Member">
		<field-map field-name="partyId" from-field="partyId"/>
		</entity-one>
		
		   <entity-condition list="regStaff" entity-name="RegistryStaff">
				<condition-expr field-name="branchId" from-field="memberBranch.branchId"/>
		</entity-condition>
		
		
		<iterate entry="email" list="regStaff">
		
		 <entity-one entity-name="Person" value-field="p">
		 	<field-map field-name="partyId" value="${userLogin.partyId}"/>
		 </entity-one>
		
        
        <set field="emailpartysa" value="${email.partyId}"/>
        <set field="releaser" value="${p.firstName}  ${p.lastName}"/>
        <call-simple-method method-name="fileReleaseToRegEmailInformation" scope="inline"></call-simple-method>
		</iterate>
	</simple-method>
	
	<simple-method method-name="saveReleaseAction">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Release"/>
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="saveReleaseActionToLogs">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Release File"/>
		<set field="newEntity.currentPossesser" value="REGISTRY" />
		<set field="newEntity.receiptStatus" value="NOT RECEIVED"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<set field="newEntity.Reason" from-field="reg.Reason"/>
		
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="saveReleaseToRegistryActionToFileMovement">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileMovement" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileMovement" field="movementId" />
		<set from-field="movementId" field="newEntity.movementId" />
		<set value="${userLogin.partyId}" field="newEntity.releasedBy" />
		<set field="newEntity.timeOut" from-field="nowTimestamp" />
		<set field="newEntity.fromRegistry" value="N" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.releasedTo" value="REGISTRY"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		 
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 
		  <entity-condition list="grouper" entity-name="RegistryFileMovementGrouping">
				<condition-expr field-name="partyId" from-field="partyId"/>
		</entity-condition>
		
		<iterate entry="singleOpenVol" list="grouper">
		<log message=">>>>>>>>>>>>>>>>>>>>>>> VOLUME-DETAILS ${singleOpenVol.volumeId}" level="info"/>
		<entity-one value-field="openVol" entity-name="RegistryFileMovementGrouping">
			<field-map field-name="groupId" from-field="singleOpenVol.groupId"/>
		</entity-one>
		
		<set field="newEntity.grouper" from-field="openVol.groupId" />
		</iterate>
		
		<set field="newEntity.activityCode" from-field="reg.Reason"/>
		<set field="newEntity.memberNumber" from-field="reg.memberNumber" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	 <simple-method method-name="fileReleaseToRegEmailInformation">
		<make-value entity-name="StaffScheduledMail" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="StaffScheduledMail" field="msgId" />
		<set from-field="msgId" field="newEntity.msgId" />
		
		<set field="party" from-field="parameters.partyId"/> 
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="party"/>
		 </entity-one>
		 
		 <entity-one entity-name="Person" value-field="requester">
		 	<field-map field-name="partyId" from-field="userLogin.partyId"/>
		 </entity-one>
		 
		 <set field="newEntity.partyId" from-field="emailpartysa"/> 
		<set field="newEntity.body" value="A file belonging to:- [${reg.firstName} ${reg.lastName}] -Payroll Number:- [reg.payrollNumber] has been released back to Registry by:- [${requester.firstName} ${requester.lastName} (payroll-${requester.employeeNumber})]. If you don't receive the file(s), please communicate to them." />
		 <set field="newEntity.subject" value="File Request"/>
		<set field="newEntity.sendStatus" value="NOTSEND" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	<!-- ========================== FILE RELEASE TO ANOTHER STAFF ================================== -->
	
	<simple-method method-name="releaseFileToAnotherStaff" short-description="request File ">
	<call-simple-method method-name="savereleaseFileToAnotherStaffAction" scope="inline"></call-simple-method>
	<call-simple-method method-name="savereleaseFileToAnotherStaffActionToLogs" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveReleaseToStaffActionToFileMovement" scope="inline"></call-simple-method>
	
		 
		 <set field="partyId" value="${newEntity.partyId}"/>
		 
		 
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
      <log message=">>>>>>>>>>>>>>>>>>>>>>> PARAMETERS > ${parameters}" level="info"/>
		 <!-- Get status -->
		 <set value="${userLogin.partyId}" field="registryFile.actionBy" />
		  <set field="registryFile.currentPossesser" from-field="registryFile.intendedPossesser" />
		 <set field="registryFile.recieptStatus" value="NOTRECEIVED"/>
		 <set field="registryFile.selectedToBeMoved" value="SEND"/>
		 <set field="registryFile.carriedBy" from-field="parameters.carriedBy" />
		<store-value value-field="registryFile"/>
		
		 <entity-one entity-name="Person" value-field="p">
		 	<field-map field-name="partyId" value="${userLogin.partyId}"/>
		 </entity-one>
		
        
        <set field="emailpartyAnotherstaff" from-field="parameters.currentPossesser" />
        <set field="releaser" value="${p.firstName}  ${p.lastName}"/>
		<call-simple-method method-name="fileReleaseToAnotherStaffEmailInformation" scope="inline"></call-simple-method>
		
	</simple-method>
	
	<simple-method method-name="savereleaseFileToAnotherStaffAction">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Send File"/>
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="savereleaseFileToAnotherStaffActionToLogs">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Send File"/>
		<set field="newEntity.currentPossesser" from-field="parameters.currentPossesser" />
		<set field="newEntity.receiptStatus" value="NOT RECEIVED"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<set field="newEntity.Reason" from-field="reg.Reason"/>
		
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="saveReleaseToStaffActionToFileMovement">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileMovement" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileMovement" field="movementId" />
		<set from-field="movementId" field="newEntity.movementId" />
		<set value="${userLogin.partyId}" field="newEntity.releasedBy" />
		<set field="newEntity.timeOut" from-field="nowTimestamp" />
		<set field="newEntity.fromRegistry" value="N" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.releasedTo" from-field="parameters.intendedPossesser"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		 
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 
		  <entity-condition list="grouper" entity-name="RegistryFileMovementGrouping">
				<condition-expr field-name="partyId" from-field="partyId"/>
		</entity-condition>
		
		<iterate entry="singleOpenVol" list="grouper">
		<log message=">>>>>>>>>>>>>>>>>>>>>>> VOLUME-DETAILS ${singleOpenVol.volumeId}" level="info"/>
		<entity-one value-field="openVol" entity-name="RegistryFileMovementGrouping">
			<field-map field-name="groupId" from-field="singleOpenVol.groupId"/>
		</entity-one>
		
		<set field="newEntity.grouper" from-field="openVol.groupId" />
		</iterate>
		
		<set field="newEntity.activityCode" from-field="reg.Reason"/>
		<set field="newEntity.memberNumber" from-field="reg.memberNumber" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	
	<simple-method method-name="fileReleaseToAnotherStaffEmailInformation">
		<make-value entity-name="StaffScheduledMail" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="StaffScheduledMail" field="msgId" />
		<set from-field="msgId" field="newEntity.msgId" />
		<set field="newEntity.partyId" from-field="emailpartyAnotherstaff"/>
		<set field="newEntity.body" value="The File(s) you requested has/have been released by [${releaser}] If you don't receive the file(s), please communicate to [${releaser}]" />
		 <set field="newEntity.subject" value="Requested Files"/>
		<set field="newEntity.sendStatus" value="NOTSEND" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	<!-- ==========================FILE RETURN================================== -->
	<simple-method method-name="returnfiles" short-description="request File ">
	<call-simple-method method-name="saveReturnAction" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveReturnActionToLogs" scope="inline"></call-simple-method>
	<call-simple-method method-name="saveFileReturnActionToFileMovement" scope="inline"></call-simple-method>
	<call-simple-method method-name="RemoveFileMovementGrouper" scope="inline"></call-simple-method>
		 
		 <set field="partyId" value="${newEntity.partyId}"/>
		 
		 
		 <set field="isQued" value="${bsh:org.ofbiz.registry.FileServices.checkIfFileRequestHasBeenQued(partyId);}"/>
		 
		 
		 
			  <if>
			<condition>
					<if-compare operator="equals" value="QUED" field="isQued"/>
			</condition>
			<then>
			
				<set field="newRequester" value="${bsh:org.ofbiz.registry.FileServices.newRequesterParty(partyId);}"/>
				
				 <entity-one entity-name="RegistryFiles" value-field="registryFileUpdateRequester">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>

		 <!-- Get status -->
		 <set value="${userLogin.partyId}" field="registryFileUpdateRequester.actionBy" />
		  <set field="registryFileUpdateRequester.approvalStatus" value="na"/>
		 <set field="registryFileUpdateRequester.status" value="REQUESTED"/>
		  <set field="registryFileUpdateRequester.fileLocation" value="REGISTRY"/>
		  <set field="registryFileUpdateRequester.currentPossesser" value="REGISTRY"/>
		  <set field="registryFileUpdateRequester.actionBy" from-field="newRequester"/>
		 <set field="registryFileUpdateRequester.recieptStatus" value="RELEASEDANDRECIEVED"/>
		<store-value value-field="registryFileUpdateRequester"/>
		
		<call-simple-method method-name="deleteFromQue" scope="inline"></call-simple-method>
		
		 <entity-one value-field="memberBranch" entity-name="Member">
		<field-map field-name="partyId" from-field="partyId"/>
		</entity-one>
		
		   <entity-condition list="regStaff" entity-name="RegistryStaff">
				<condition-expr field-name="branchId" from-field="memberBranch.branchId"/>
		</entity-condition>
		
		
		<iterate entry="email" list="regStaff">
        
        <set field="emailparty" value="${email.partyId}"/>
		 <call-simple-method method-name="fileNewRequesterEmailInformation" scope="inline"></call-simple-method>
		</iterate>
		<call-simple-method method-name="setFileMovementGrouper" scope="inline"></call-simple-method>
		
			</then>
			
			<else>
			
			<entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>

		 <!-- Get status -->
		 <set value="${userLogin.partyId}" field="registryFile.actionBy" />
		  <set field="registryFile.approvalStatus" value="na"/>
		 <set field="registryFile.status" value="AVAILABLE"/>
		  <set field="registryFile.fileLocation" value="REGISTRY"/>
		  <set field="registryFile.currentPossesser" value="REGISTRY"/>
		 <set field="registryFile.recieptStatus" value="RELEASEDANDRECIEVED"/>
		<store-value value-field="registryFile"/>
			
			</else>
			
			</if>
		 
	</simple-method>
	
	<simple-method method-name="deleteFromQue">
	
	
		<entity-condition list="requester" entity-name="RegistryFileRequestQueu">
		<condition-list>
		<condition-expr field-name="partyId" from-field="partyId"/>
		<condition-expr field-name="requester" from-field="newRequester"/>
		</condition-list>
		</entity-condition>
		
		<iterate entry="singleRequester" list="requester">
		<entity-one entity-name="RegistryFileRequestQueu" value-field="requesterToBeRemoved">
		 	<field-map field-name="queId" from-field="singleRequester.queId"/>
		 </entity-one>
		 <entity-one entity-name="RegistryFiles" value-field="UpdateReason">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		 <set from-field="requesterToBeRemoved.Reason" field="UpdateReason.Reason"/>
		<remove-value value-field="requesterToBeRemoved" />
		</iterate>
		
	</simple-method>
	
	 <simple-method method-name="fileNewRequesterEmailInformation">
		<make-value entity-name="StaffScheduledMail" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="StaffScheduledMail" field="msgId" />
		<set from-field="msgId" field="newEntity.msgId" />
		
		<set field="party" from-field="parameters.partyId"/> 
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="party"/>
		 </entity-one>
		 
		 <set field="newEntity.partyId" from-field="emailparty"/> 
		<set field="newEntity.body" value="A Request For a file belonging to:- [${reg.firstName} ${reg.lastName}] -Payroll Number:- [reg.payrollNumber] has been Waiting For file to be returned. Please log onto the system for details now that the file is back. " />
		 <set field="newEntity.subject" value="File Request"/>
		<set field="newEntity.sendStatus" value="NOTSEND" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	
	
	
	<simple-method method-name="saveReturnAction">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileActions" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileActions" field="actionId" />
		<set from-field="actionId" field="newEntity.actionId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Return"/>
		
		<create-value value-field="newEntity" />
	</simple-method>
	
	
	<simple-method method-name="saveReturnActionToLogs">
		<now-timestamp field="nowTimestamp"/>
		<make-value entity-name="RegistryFileLogs" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileLogs" field="logId" />
		<set from-field="logId" field="newEntity.logId" />
		<set value="${userLogin.partyId}" field="newEntity.actionBy" />
		<set field="newEntity.actionDate" from-field="nowTimestamp" />
		<set field="partyId" from-field="parameters.partyId" />
		<set field="newEntity.fileActionTypeId" value="Returned File"/>
		<set field="newEntity.currentPossesser" value="REGISTRY" />
		<set field="newEntity.receiptStatus" value="RECEIVED"/>
		<set field="newEntity.carriedBy" from-field="parameters.carriedBy" />
		
		<entity-one entity-name="RegistryFiles" value-field="reg">
		 	<field-map field-name="partyId" from-field="partyId"/>
		 </entity-one>
		
		<set field="newEntity.folioNo" from-field="reg.folioNo" />
		<create-value value-field="newEntity" />
	</simple-method>
	
	
	 <simple-method method-name="saveFileReturnActionToFileMovement"
        short-description="File receive">
        <now-timestamp field="nowTimestamp"/>
       
        <set field="partyId" from-field="parameters.partyId"/>
        <set field="releasedTo" value="REGISTRY"/>
        <set field="time" value="${bsh:org.ofbiz.registry.FileServices.getDateOfReceivedFile(partyId, releasedTo);}" type="Timestamp"/>
        <log message="=====================PLEASE SHOW TIME >> ${time} Party>${partyId} releasedto > ${releasedTo}" level="info"/>
        
        
        <entity-condition list="dateList" entity-name="RegistryFileMovement">
				<condition-expr field-name="timeOut" from-field="time"/>
		</entity-condition>
		
		<iterate entry="singleOpenVol" list="dateList">
		<log message=">>>>>>>>>>>>>>>>>>>>>>> TIME-OUT >> ${singleOpenVol.movementId}" level="info"/>
        
        <entity-one entity-name="RegistryFileMovement" value-field="reg">
		 	<field-map field-name="movementId" value="${singleOpenVol.movementId}"/>
		 </entity-one>
        
        <set field="reg.timeIn" from-field="nowTimestamp"/>
         <set field="reg.receivedBy" value="${userLogin.partyId}"/>
        <store-value value-field="reg" />
        </iterate>
    </simple-method>
	
	
	 
	
	
  	<!-- update Budget Status -->
    <simple-method method-name="updateRegistryFileStatus" short-description="Update Registry File Status Status">

        <make-value value-field="lookupPKMap" entity-name="RegistryFiles"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
        <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
    </simple-method>




	<!-- Service to update File after the request is successfull -->
	<simple-method method-name="updateFileStatus" short-description="Update a file's status">
        <make-value value-field="lookupPKMap" entity-name="RegistryFiles"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
        <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" />
    </simple-method>

	

	<!-- documents -->
	<simple-method method-name="createDocument"
		short-description="Create File ">
		<make-value entity-name="RegistryDocuments" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<now-timestamp field="nowTimestamp"/>
		<sequenced-id sequence-name="RegistryDocuments" field="documentId" />
		<log message="############################## PARAMS: ${parameters.memberNumber} ############" level="info"/>
		<set from-field="documentId" field="newEntity.documentId" />
		<set field="partyId" from-field="parameters.partyId"/>
		<set field="newEntity.documentFolio" value="${parameters.memberNumber}-${bsh:org.ofbiz.registry.FileServices.getFileDocCount(partyId);}"/>
		<log message=">>>>>>>>>>>>>>>>>>>>>>> PARAMETERS ${memberNumber}" level="info"/>
		 <set field="DocumentTypeId" from-field="parameters.DocumentTypeId"/>
		 <set from-field="nowTimestamp" field="newEntity.receiptDate"/>
		 <set value="${userLogin.partyId}" field="newEntity.creator"/>
		
		
		
		<create-value value-field="newEntity" />
		<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
	</simple-method>
	


<!-- locations -->
	<simple-method method-name="createfileActivity"
		short-description="Create File location">
		<make-value entity-name="RegistryFileActivity" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<!-- <sequenced-id sequence-name="RegistryFileActivity" field="activityId" />

		<set from-field="activityId" field="newEntity.activityId" /> -->
		<create-value value-field="newEntity" />
		<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
	</simple-method>

	<simple-method method-name="updatefileActivity"
		short-description="Update an existing Budget">
		<entity-one entity-name="RegistryFileActivity" value-field="lookedUpValue" />
		<set-nonpk-fields map="parameters" value-field="lookedUpValue" />
		<set-pk-fields value-field="lookedUpValue" map="parameters" />
		<store-value value-field="lookedUpValue" />
		<!-- <property-to-field resource="HumanResUiLabels"
			property="UpdateSuccess" field="successMessage" /> -->

	</simple-method>

	<simple-method method-name="deletefileActivity"
		short-description="Remove an file type">
		<set field="activityId" from-field="parameters.activityId" />
		<entity-one entity-name="RegistryFileActivity" value-field="lookedUpValue" />
		<remove-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="DeleteSuccess" field="successMessage" />
	</simple-method>

<simple-method method-name="addSubDocument"
		short-description="Create File location">
		<make-value entity-name="RegistryFileSubDocuments" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<now-timestamp field="nowTimestamp"/>
		<sequenced-id sequence-name="RegistryFileSubDocuments" field="subDocumentId" />

		<set from-field="subDocumentId" field="newEntity.subDocumentId" /> 
		<set from-field="nowTimestamp" field="newEntity.creationDate"/>
		<create-value value-field="newEntity" />
		<property-to-field resource="HumanResUiLabels"
			property="CreateSuccess" field="successMessage" />
	</simple-method>
	
	<!-- ========================== RECALL FILE ================================== -->
	
	<simple-method method-name="recallFile" short-description="request File">
	<log message="=====================PLEASE SHOW ${parameters}" level="info"/>
	<set field="party" from-field="parameters.partyId"/>
		
		 <entity-one entity-name="RegistryFiles" value-field="registryFile">
		 	<field-map field-name="partyId" from-field="party"/>
		 </entity-one>

		 <set value="${userLogin.partyId}" field="registryFile.actionBy"/>
		 <set field="registryFile.status" value="AVAILABLE"/>
		 <set field="registryFile.currentPossesser" value="REGISTRY"/>
		 <set field="registryFile.recieptStatus" value="RECALLED_TO_REGISTRY"/>
		<store-value value-field="registryFile"/>
	</simple-method>
	
	<simple-method method-name="setFileMovementGrouper"	short-description="Create File Actions">
		<make-value entity-name="RegistryFileMovementGrouping" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryFileMovementGrouping" field="groupId" />
		<set from-field="groupId" field="newEntity.groupId" />
		<set from-field="partyId" field="newEntity.partyId"/>
		<create-value value-field="newEntity" />
	</simple-method>
	
	<simple-method method-name="RemoveFileMovementGrouper"	short-description="Create File Actions">
		<entity-condition list="grouper" entity-name="RegistryFileMovementGrouping">
				<condition-expr field-name="partyId" from-field="partyId"/>
		</entity-condition>
		
		<iterate entry="singleOpenVol" list="grouper">
		<log message=">>>>>>>>>>>>>>>>>>>>>>> VOLUME-DETAILS ${singleOpenVol.volumeId}" level="info"/>
		<entity-one value-field="openVol" entity-name="RegistryFileMovementGrouping">
			<field-map field-name="groupId" from-field="singleOpenVol.groupId"/>
		</entity-one>
		 <remove-value value-field="openVol" />
		</iterate>
	</simple-method>
	
	
	 <!--======================= REGISTRY STAFF =================================== -->
                     
	<simple-method method-name="createRegistryStaff" short-description="Create File location">
		<make-value entity-name="RegistryStaff" value-field="newEntity" />
		<set-pk-fields map="parameters" value-field="newEntity" />
		<set-nonpk-fields map="parameters" value-field="newEntity" />
		<sequenced-id sequence-name="RegistryStaff" field="staffId" />
		<set from-field="staffId" field="newEntity.staffId" /> 
		
		<entity-one value-field="bran" entity-name="Person">
			<field-map field-name="partyId" from-field="newEntity.partyId"/>
			</entity-one>
		
		<set from-field="bran.branchId" field="newEntity.branchId" /> 
	    
	   <create-value value-field="newEntity" />
      <property-to-field resource="HumanResUiLabels"
	  property="CreateSuccess" field="successMessage" />
			
			</simple-method>
			
			
			<simple-method method-name="deleteRegistryStaff"
		short-description="Remove an file type">
		<set field="staffId" from-field="parameters.staffId" />
		<entity-one entity-name="RegistryStaff" value-field="lookedUpValue" />
		<remove-value value-field="lookedUpValue" />
		<property-to-field resource="HumanResUiLabels"
			property="DeleteSuccess" field="successMessage" />
	</simple-method>
	





</simple-methods>
