<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">


    <simple-method method-name="createPaymentType" short-description="create Payment Type">
            <make-value entity-name="PaymentType" value-field="newEntity"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <set value="N" field="newEntity.hasTable"/>
            <sequenced-id sequence-name="PaymentType" field="paymentTypeId"/>
            <now-timestamp field="newEntity.createdDate"/>
            <set from-field="paymentTypeId" field="newEntity.paymentTypeId"/>
            <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="createPaymentMethodType" short-description="create Payment Method Type">
            <make-value entity-name="PaymentMethodType" value-field="newEntity"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <set value="N" field="newEntity.hasTable"/>
            <sequenced-id sequence-name="PaymentMethodType" field="paymentMethodTypeId"/>
            <now-timestamp field="newEntity.createdDate"/>
            <set from-field="paymentMethodTypeId" field="newEntity.paymentMethodTypeId"/>
            <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="createGlAccountType" short-description="create Payment Type">
            <make-value entity-name="GlAccountType" value-field="newEntity"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <set value="N" field="newEntity.hasTable"/>
            <sequenced-id sequence-name="GlAccountType" field="glAccountTypeId"/>
            <now-timestamp field="newEntity.createdDate"/>
            <set from-field="glAccountTypeId" field="newEntity.glAccountTypeId"/>
            <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="createAccts" short-description="create Settlement Accounts">
            <make-value entity-name="SettlementAccounts" value-field="newEntity"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <sequenced-id sequence-name="SettlementAccounts" field="settlementAccId"/>
            <set from-field="settlementAccId" field="newEntity.settlementAccId"/>
            <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="createAcctgTransType" short-description="create Accounting Transaction Type">
            <make-value entity-name="AcctgTransType" value-field="newEntity"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <set value="N" field="newEntity.hasTable"/>
            <sequenced-id sequence-name="AcctgTransType" field="acctgTransTypeId"/>
            <now-timestamp field="newEntity.createdDate"/>
            <set from-field="acctgTransTypeId" field="newEntity.acctgTransTypeId"/>
            <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="createGeneratedEndDayTrans" short-description="create Accounting Transaction Type">
            <make-value entity-name="GeneratedEndDayTrans" value-field="newEntity"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <set value="N" field="newEntity.hasTable"/>
            <sequenced-id sequence-name="GeneratedEndDayTrans" field="generatedId"/>
            <now-timestamp field="newEntity.createdDate"/>
            <set from-field="generatedId" field="newEntity.generatedId"/>
            <create-value value-field="newEntity"/>
    </simple-method>

    <simple-method method-name="generateEndDayTrans" short-description="Service to automatically generate end of day trans" >
        <!-- Get Current Time -->
        <now-timestamp field="nowTimestamp"/>
        <!-- Get A branch to work with -->
        <set field="organizationPartyId" from-field="parameters.branchId"/>

        <set field="savingsAccount" value="42000003"/>
        <set field="settlementAccount" value="943006"/>

        <set field="count" type="Long" value="0"/>
        <set field="debitCount" type="Long" value="0"/>
        <set field="creditCount" type="Long" value="0"/>

        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDayStart" ret-field="dayStart">
            <field field="nowTimestamp" type="java.sql.Timestamp"/>
        </call-class-method>

        <call-class-method class-name="org.ofbiz.base.util.UtilDateTime" method-name="getDayEnd" ret-field="dayEnd">
            <field field="nowTimestamp" type="java.sql.Timestamp"/>
        </call-class-method>

        <log message="DAY STARTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT ${dayStart}" level="info" />
        <log message="DAY ENDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ${dayEnd}" level="info" />

        <!-- Get all transactions that for this branch -->
        <entity-condition entity-name="AcctgTransEntry" list="acctgTransEntry">
            <condition-list combine="and">
                <condition-expr field-name="organizationPartyId" operator="equals" from-field="parameters.branchId"/>
                <condition-expr field-name="glAccountId" operator="equals" value="42000003"/>
                <condition-expr field-name="partyId" operator="not-equals" from-field="parameters.branchId"/>
                <condition-expr field-name="createdTxStamp" operator="greater-equals" from-field="dayStart"/>
                <condition-expr field-name="createdTxStamp" operator="less-equals" from-field="dayEnd"/>
            </condition-list>
        </entity-condition>
<!--         <iterate entry="singleEntry" list="acctgTransEntry">
            <if-not-empty field="singleEntry.partyId" >
                 <log message="############################# WORKING WITH acctgTransId ${singleEntry.acctgTransId}" level="info" />
                 <log message="############################# WORKING WITH partyId ${singleEntry.partyId}" level="info" />
                 <log message="############################# WORKING WITH organizationPartyId ${singleEntry.organizationPartyId}" level="info" />
                 <log message="############################# WORKING WITH debitCreditFlag ${singleEntry.debitCreditFlag}" level="info" />
                 <log message="############################# NEXT RECORD ###############################################" level="info" />
             <set field="count" value="${count + 1}" type="Long"/>
            </if-not-empty>
        </iterate> -->
        <iterate entry="singleEntry" list="acctgTransEntry">
            <if-not-empty field="singleEntry.partyId" >
            <log message="#################################################################### WORKING WITH acctgTransId ${singleEntry.acctgTransId}" level="info" />
            <!-- first, create the AcctgTrans -->
            <set-service-fields service-name="createAcctgTrans" to-map="createAcctgTransParams" map="parameters"/>
            <if-empty field="createAcctgTransParams.transactionDate">
                <now-timestamp field="createAcctgTransParams.transactionDate"/>
            </if-empty>
            <if-empty field="createAcctgTransParams.acctgTransTypeId">
                <set field="createAcctgTransParams.acctgTransTypeId" value="_NA_"/>
            </if-empty>
            <if-empty field="createAcctgTransParams.description">
                <set field="createAcctgTransParams.description" value="SETTLEMENT TRANSACTION"/>
            </if-empty>
            <set field="createAcctgTransParams.isPosted" value="Y" />
            <set field="createAcctgTransParams.isApproved" value="Y" />
            <set field="createAcctgTransParams.glFiscalTypeId" value="ACTUAL" />
            <call-service service-name="createAcctgTrans" in-map-name="createAcctgTransParams">
                <result-to-field result-name="acctgTransId"/>
            </call-service>

            <log message="############################################################CREATED acctgTransId ${acctgTransId}" level="info"></log>
            <log message="############################################################savingsAccount  ${savingsAccount}" level="info"></log>
            <log message="############################################################settlementAccount  ${settlementAccount}" level="info"></log>
            <log message="############################################################organizationPartyId  ${organizationPartyId}" level="info"></log>
            <log message="############################################################partyId  ${singleEntry.partyId}" level="info"></log>

            <if>
                <condition>
                    <if-compare field="singleEntry.debitCreditFlag" operator="equals" value="D" />
                </condition>
                <then>
                    <!-- This is what this organizationPartyId is owed by other branches ASSET -->

                    <!-- CREATE A RECEIVABLE HERE FOR organizationPartyId credit the savings account and debit the settlement acc -->
                    <!-- ensure to populate owedByPartyId with partyId to show who owes this organizationPartyId  and partyId with
                        organizationPartyId so as not to repeat generating this transaction again
                    -->


                    <log message="=============================================================================================NOW DOING TRANSACTION FOR ${organizationPartyId}"
                        level="info">
                    </log>
                        <!-- now, create the debit AcctgTransEntry settlement acc -->
                    <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
                    <set field="createAcctgTransEntryParams.glAccountId" from-field="settlementAccount"/>
                    <set field="createAcctgTransEntryParams.debitCreditFlag" value="D"/>
                    <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
                    <set field="createAcctgTransEntryParams.organizationPartyId" from-field="parameters.branchId" />
                    <!-- <set field="createAcctgTransEntryParams.owedByPartyId" from-field="singleEntry.partyId" /> -->
                    <set field="createAcctgTransEntryParams.partyId" from-field="parameters.branchId" />
                    <set field="createAcctgTransEntryParams.amount" from-field="singleEntry.amount" />
                    <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                    <clear-field field="createAcctgTransEntryParams"/>

                    <set-service-fields service-name="createGeneratedEndDayTrans" map="parameters" to-map="createGeneratedEndDayTransParams" />
                    <set field="createGeneratedEndDayTransParams.generationDate" from-field="nowTimestamp" />
                    <set field="createGeneratedEndDayTransParams.acctgTransId" from-field="acctgTransId" />
                    <set field="createGeneratedEndDayTransParams.acctgTransEntrySeqId" from-field="_NA_" />
                    <set field="createGeneratedEndDayTransParams.description" from-field="Auto Generated End of Day for ${nowTimestamp}" />
                    <set field="createGeneratedEndDayTransParams.partyId" from-field="parameters.branchId" />
                    <set field="createGeneratedEndDayTransParams.glAccountId" from-field="settlementAccount" />
                    <set field="createGeneratedEndDayTransParams.organizationPartyId" from-field="parameters.branchId" />
                    <!-- <set field="createGeneratedEndDayTransParams.owedByPartyId" from-field="singleEntry.partyId" /> -->
                    <!-- <set field="createGeneratedEndDayTransParams.owesPartyId" from-field="parameters.branchId" /> -->
                    <set field="createGeneratedEndDayTransParams.amount" from-field="singleEntry.amount" />
                    <set field="createGeneratedEndDayTransParams.debitCreditFlag" value="D" />
                    <call-service service-name="createGeneratedEndDayTrans" in-map-name="createGeneratedEndDayTransParams" />

                    <!-- now the credit AcctgTransEntry settlement acc -->
                    <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
                    <set field="createAcctgTransEntryParams.glAccountId" from-field="savingsAccount"/>
                    <set field="createAcctgTransEntryParams.debitCreditFlag" value="C"/>
                    <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
                    <set field="createAcctgTransEntryParams.organizationPartyId" from-field="parameters.branchId" />
                    <set field="createAcctgTransEntryParams.partyId" from-field="parameters.branchId" />
                    <set field="createAcctgTransEntryParams.amount" from-field="singleEntry.amount" />
                    <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                    <clear-field field="createAcctgTransEntryParams"/>


                    <!-- CREATE A PAYABLE HERE FOR partyId debit the savings account and credit the settlement acc -->
                    <!-- ensure to populate owesPartyId with organizationPartyId to show who he owes and organizationPartyId and
                        partyId with partyId so as not to repeat generating this transaction again
                    -->
                    <log message="DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEBIT ZONE" level="info" />
                    <log message="zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz=======NOW DOING TRANSACTION FOR ${singleEntry.partyId}" level="info" />

                        <!-- now, create the debit AcctgTransEntry settlement acc -->
                    <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
                    <set field="createAcctgTransEntryParams.glAccountId" from-field="savingsAccount"/>
                    <set field="createAcctgTransEntryParams.debitCreditFlag" value="D"/>
                    <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
                    <set field="createAcctgTransEntryParams.organizationPartyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.partyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.amount" from-field="singleEntry.amount" />
                    <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                    <clear-field field="createAcctgTransEntryParams"/>

                    <!-- now the credit AcctgTransEntry settlement acc -->
                    <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
                    <set field="createAcctgTransEntryParams.glAccountId" from-field="settlementAccount"/>
                    <set field="createAcctgTransEntryParams.debitCreditFlag" value="C"/>
                    <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
                    <set field="createAcctgTransEntryParams.organizationPartyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.owesPartyId" from-field="parameters.branchId" />
                    <set field="createAcctgTransEntryParams.partyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.amount" from-field="singleEntry.amount" />
                    <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                    <clear-field field="createAcctgTransEntryParams"/>
                    <set field="debitCount" value="${debitCount + 1}" type="Long"/>
                </then>
            <else-if>
                <condition>
                    <if-compare field="singleEntry.debitCreditFlag" operator="equals" value="C" />
                </condition>
                <then>
                    <!-- This is a deposit hence debit the savings account and credit the settlement acc-->
                    <!-- This is what this organizationPartyId owes other branches LIABILITY -->
                    <log message="CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCREDIT ZONE" level="info"></log>
                    <log message="=============================================================================================NOW DOING TRANSACTION FOR ${organizationPartyId}"
                        level="info">
                    </log>
                    <!-- now, create the debit AcctgTransEntry settlement acc -->
                    <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
                    <set field="createAcctgTransEntryParams.glAccountId" from-field="savingsAccount"/>
                    <set field="createAcctgTransEntryParams.debitCreditFlag" value="D"/>
                    <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
                    <set field="createAcctgTransEntryParams.organizationPartyId" from-field="parameters.branchId" />
                    <set field="createAcctgTransEntryParams.partyId" from-field="parameters.branchId" />
                    <set field="createAcctgTransEntryParams.amount" from-field="singleEntry.amount" />
                    <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                    <clear-field field="createAcctgTransEntryParams"/>

                    <!-- now the credit AcctgTransEntry settlement acc -->
                    <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
                    <set field="createAcctgTransEntryParams.glAccountId" from-field="settlementAccount"/>
                    <set field="createAcctgTransEntryParams.debitCreditFlag" value="C"/>
                    <set field="createAcctgTransEntryParams.owesPartyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
                    <set field="createAcctgTransEntryParams.organizationPartyId" from-field="parameters.branchId" />
                    <set field="createAcctgTransEntryParams.partyId" from-field="parameters.branchId" />
                    <set field="createAcctgTransEntryParams.amount" from-field="singleEntry.amount" />
                    <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                    <clear-field field="createAcctgTransEntryParams"/>
                    <log message="=============================================================================================NOW DOING TRANSACTION FOR ${singleEntry.partyId}"
                        level="info">
                    </log>
                    <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
                    <set field="createAcctgTransEntryParams.glAccountId" from-field="settlementAccount"/>
                    <!-- <set field="createAcctgTransEntryParams.owedByPartyId" from-field="parameters.branchId" /> -->
                    <set field="createAcctgTransEntryParams.debitCreditFlag" value="D"/>
                    <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
                    <set field="createAcctgTransEntryParams.organizationPartyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.partyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.amount" from-field="singleEntry.amount" />
                    <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                    <clear-field field="createAcctgTransEntryParams"/>

                    <!-- now the credit AcctgTransEntry settlement acc -->
                    <set-service-fields service-name="createAcctgTransEntry" map="parameters" to-map="createAcctgTransEntryParams"/>
                    <set field="createAcctgTransEntryParams.acctgTransId" from-field="acctgTransId"/>
                    <set field="createAcctgTransEntryParams.glAccountId" from-field="savingsAccount"/>
                    <set field="createAcctgTransEntryParams.debitCreditFlag" value="C"/>
                    <set field="createAcctgTransEntryParams.acctgTransEntryTypeId" value="_NA_"/>
                    <set field="createAcctgTransEntryParams.organizationPartyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.partyId" from-field="singleEntry.partyId" />
                    <set field="createAcctgTransEntryParams.amount" from-field="singleEntry.amount" />
                    <call-service service-name="createAcctgTransEntry" in-map-name="createAcctgTransEntryParams"/>
                    <clear-field field="createAcctgTransEntryParams"/>
                    <clear-field field="acctgTransId"/>
                    <!-- <field-to-result field="acctgTransId" result-name="acctgTransId"/> -->
                    <set field="creditCount" value="${creditCount + 1}" type="Long"/>
                </then>
            </else-if>
            </if>
           <set field="count" value="${count + 1}" type="Long"/>
           </if-not-empty>
        </iterate>
        <log message="############################# TOTAL RECORDS ${count} ###############################################" level="info" />
        <property-to-field resource="AccountingUiLabels" property="InterBranchTransDebits" field="debitsMessage"/>
        <property-to-field resource="AccountingUiLabels" property="InterBranchTransCredits" field="creditsMessage"/>
        <property-to-field resource="AccountingUiLabels" property="InterBranchTrans" field="successMessage"/>
        <string-append field="successMessage" string="${debitsMessage}"/>
        <string-append field="successMessage" string="${creditsMessage}"/>
    </simple-method>


    <simple-method method-name="generateSettlementTransOld" short-description="create Funding Type">
            <!-- Get Branch ID -->
        <now-timestamp field="nowTimestamp"/>
        <set field="organizationPartyId" from-field="parameters.branchId"/>

        <log message="BRANCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH ${organizationPartyId}" level="info"></log>

            <!-- Get the Transactions from accounting Trans -->
        <entity-condition entity-name="AcctgTransEntry" list="acctgTransEntry">
            <condition-list combine="and">
                <condition-expr field-name="partyId" operator="not-equals" from-field="organizationPartyId"/>
                <condition-expr field-name="organizationPartyId" operator="equals" from-field="organizationPartyId"/>

                <!-- <condition-expr field-name="transactionDate" operator="greater-equals" from-field="parameters.fromTransactionDate" ignore-if-empty="true"/>
                <condition-expr field-name="transactionDate" operator="less-equals" from-field="parameters.thruTransactionDate" ignore-if-empty="true"/>
                <condition-expr field-name="entryDate" operator="greater-equals" from-field="parameters.fromEntryDate" ignore-if-empty="true"/>
                <condition-expr field-name="entryDate" operator="less-equals" from-field="parameters.thruEntryDate" ignore-if-empty="true"/> -->
            </condition-list>
        </entity-condition>

        <!-- INTERATE OVER CHECKING FOR SAVINGS WITHDRAWABLE ACCOUNT AND TYPE O TRANSACTION  -->
        <iterate entry="singleEntry" list="acctgTransEntry">
            <if>
                <condition>
                    <if-compare field="singleEntry.glAccountId" operator="equals" value="35000039" />
                </condition>
                <then>
                    <if>
                        <condition>
                             <if-compare field="singleEntry.debitCreditFlag" operator="equals" value="D" />
                        </condition>
                        <then>
                           <!-- Create a record of Withdrawal here -->
                           <log message="CREATING A WITHDRAWALLLLLLLLLLLLLLLLLLLLL TRANSACTION HERE" level="info"></log>
                           <!-- Debit Settlement Account -->

<!-- REMEMBER TO START FROM HERE EDIT THIS CHUNK OF CODE TO REFLECT MY INTERBRANCH GL POSTINGS  -->



        <!-- set values for AcctgTrans -->
        <set field="quickCreateAcctgTransAndEntries.transactionDate" from-field="nowTimestamp"/>
        <set field="quickCreateAcctgTransAndEntries.glFiscalTypeId" value="ACTUAL"/>
        <set field="quickCreateAcctgTransAndEntries.partyId" from-field="organizationPartyId"/>
        <set field="quickCreateAcctgTransAndEntries.isPosted" value="Y"/>
        <set field="quickCreateAcctgTransAndEntries.description" value="Inter Branch Settlement"/>

        <!-- set values for AcctgTransEntry -->
        <set field="quickCreateAcctgTransAndEntries.organizationPartyId" from-field="organizationPartyId"/>
        <set field="quickCreateAcctgTransAndEntries.amount" from-field="singleEntry.amount"/>
        <set field="quickCreateAcctgTransAndEntries.acctgTransEntryTypeId" value="_NA_"/>
        <set field="quickCreateAcctgTransAndEntries.creditGlAccountId" value="35000039"/>
        <set field="quickCreateAcctgTransAndEntries.debitGlAccountId" value="30000006"/>
        <set field="quickCreateAcctgTransAndEntries.acctgTransTypeId" value="_NA_"/>
        <!-- Make sure we have the glAccountId, glAccountIdOffset, organizationPartyId -->
<!--         <if-empty field="quickCreateAcctgTransAndEntries.debitGlAccountId">
            <set field="creditDebit" value="Debit"/>
            <set field="requiredField" value="glAccountId"/>
            <add-error>
                <fail-property resource="AccountingErrorUiLabels" property="AccountingFinAccountCannotPost"/>
            </add-error>
        </if-empty>
        <if-empty field="quickCreateAcctgTransAndEntries.creditGlAccountId">
            <set field="creditDebit" value="credit"/>
            <set field="requiredField" value="glAccountId"/>
            <add-error>
                <fail-property resource="AccountingErrorUiLabels" property="AccountingFinAccountCannotPost"/>
            </add-error>
        </if-empty>
        <if-empty field="organizationPartyId">
            <set field="creditDebit" value=""/>
            <set field="requiredField" value="organizationPartyId"/>
            <add-error>
                <fail-property resource="AccountingErrorUiLabels" property="AccountingFinAccountCannotPost"/>
            </add-error>
        </if-empty> -->
        <check-errors/>
        <call-service service-name="quickCreateAcctgTransAndEntries" in-map-name="quickCreateAcctgTransAndEntries" include-user-login="true"/>
<!-- #*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*##*#*# -->

                           <!-- Credit Savings Account -->
                        </then>
                    <else-if>
                        <condition>
                            <if-compare field="singleEntry.debitCreditFlag" operator="equals" value="C" />
                        </condition>
                        <then>
                         <!-- Create a record of Deposit here -->
                          <log message="CREATING A DEPOSITTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT TRANSACTION HERE" level="info"></log>
                                  <set field="quickCreateAcctgTransAndEntries.transactionDate" from-field="nowTimestamp"/>
        <set field="quickCreateAcctgTransAndEntries.glFiscalTypeId" value="ACTUAL"/>
        <set field="quickCreateAcctgTransAndEntries.partyId" from-field="organizationPartyId"/>
        <set field="quickCreateAcctgTransAndEntries.isPosted" value="Y"/>
        <set field="quickCreateAcctgTransAndEntries.description" value="Inter Branch Settlement"/>

        <!-- set values for AcctgTransEntry -->
        <set field="quickCreateAcctgTransAndEntries.organizationPartyId" from-field="organizationPartyId"/>
        <set field="quickCreateAcctgTransAndEntries.amount" from-field="singleEntry.amount"/>
        <set field="quickCreateAcctgTransAndEntries.acctgTransEntryTypeId" value="_NA_"/>
        <set field="quickCreateAcctgTransAndEntries.creditGlAccountId" value="30000006"/>
        <set field="quickCreateAcctgTransAndEntries.debitGlAccountId" value="35000039"/>
        <set field="quickCreateAcctgTransAndEntries.acctgTransTypeId" value="_NA_"/>
           <check-errors/>
        <call-service service-name="quickCreateAcctgTransAndEntries" in-map-name="quickCreateAcctgTransAndEntries" include-user-login="true"/>
                        </then>
                    </else-if>
                    </if>
                </then>
            </if>
        </iterate>
    </simple-method>

    <simple-method method-name="createFundingRules" short-description="Create Sasra Report">
            <make-value entity-name="FundingTypeRules" value-field="newEntity"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <sequenced-id sequence-name="FundingTypeRules" field="fundingRulesId"/>
            <now-timestamp field="newEntity.createdDate"/>
            <set from-field="fundingRulesId" field="newEntity.fundingRulesId"/>
            <create-value value-field="newEntity"/>

            <!-- Post Transactions -->

            <!-- Checking Accounts in the branch -->

            <!-- Post at the branch level -->

            <!-- After Approval post to the HQ accounts -->

    </simple-method>



</simple-methods>
